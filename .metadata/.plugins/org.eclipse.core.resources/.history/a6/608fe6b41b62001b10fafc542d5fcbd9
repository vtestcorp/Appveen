package com.PageModules;

import java.util.List;

import org.openqa.selenium.WebElement;

import com.PageObjects.ObjectAddDataAppCentre;

public class AddDataAppCentre extends ObjectAddDataAppCentre{
	
	public AddDataAppCentre() {
		super();
	}
	
	public int getCheckboxesNumber() {
		int numberOfCheckBoxes = (getWebElements(allcheckBoxes).size() - 1);
		return numberOfCheckBoxes;
		
	}

	public void addData() {
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		clickElement(addDataButton);
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		enterText(idTextBox, generateRandomString());
		enterText(nameTextBox, generateRandomString());
		clickElement(saveButton);
	}

	public void editEntryById(String matchedText, String matchid, String editedValue) {
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		List<WebElement> elements = getWebElements(allIds);
		int size = elements.size();
		int index = 0;
		for (int i = 1; i < size; i++) {
			WebElement element = elements.get(i);
			String textValue = element.getText();
			if (textValue.equalsIgnoreCase(matchedText)) {
				index = elements.indexOf(element);
				System.out.println(index);
			}
		}
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		List<WebElement> checkBoxes = getWebElements(allcheckBoxes);
		clickElementJS(checkBoxes.get(index));
		clickElementJS(editButton);

		List<WebElement> inputTextBoxes = getWebElements(allinputTextBoxes);
		for (int i = 1; i < inputTextBoxes.size(); i++) {
			String idValue = inputTextBoxes.get(i).getAttribute("id");
			if (idValue.equalsIgnoreCase(matchid)) {
				clearAllText(inputTextBoxes.get(i));
				inputTextBoxes.get(i).sendKeys(editedValue);
				break;
			}
		}
		clickElementJS(saveChangesButton);
		closeCurrentWindow();
	}

	public void deleteEntry(String matchedText) {
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		List<WebElement> elements = getWebElements(allIds);
		int size = elements.size();
		int index = 0;
		for (int i = 1; i < size; i++) {
			WebElement element = elements.get(i);
			String textValue = element.getText();
			if (textValue.equalsIgnoreCase(matchedText)) {
				index = elements.indexOf(element);
				System.out.println(index);
			}
		}
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		List<WebElement> checkBoxes = getWebElements(allcheckBoxes);

		clickElementJS(checkBoxes.get(index));
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		clickElement(deleteButton);
		clickElement(yesPopup);
		closeCurrentWindow();
	}

	///////////////// UI Validation ///////////////
	
	public boolean IsAddDataButtonDisplayed() {
		boolean result=isElementDisplayed(addDataButton);
		System.out.println("The Add Data Button is displayed");
		return result;
	}
	
	
	public boolean isAddDateButtonClickable() {
		clickElementJS(addDataButton);
		if (isElementDisplayed(saveButton)) {
			System.out.println("Add button is clickable");
		}
		return isElementDisplayed(saveButton);
	}
	public void isSelectAllCheckBoxSelected() {
		clickElementJS(selectcheckBoxForAll);
		boolean result = isElementSelected(selectcheckBoxForAll);
		if (result) {
			System.out.println("All Checkboxes are selected");
		}
	}

	public void individualCheckBoxSelectable() {
		List<WebElement> checkBoxes = getWebElements(allcheckBoxes);
		int size = checkBoxes.size();
		for (int i = 1; i < size; i++) {
			clickElementJS(checkBoxes.get(i));
			applyWait(5000);
			boolean result = isElementSelected(checkBoxes.get(i));
			if (!result) {
				System.out.println("checkbox not selectable");
			}
		}
	}

	public boolean isDeleteIconDisplayed() {
		clickElementJS(selectcheckBoxForAll);
		boolean result=getElement(deleteButton).isDisplayed();
		return result;
	}

	public boolean isEditIconDisplayed() {
		clickElementJS(selectcheckBoxForAll);
		boolean result=getElement(editButton).isDisplayed();
		return result;
	}


}
