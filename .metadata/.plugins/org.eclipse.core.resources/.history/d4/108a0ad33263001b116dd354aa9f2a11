package com.PageObjects;

import java.util.LinkedHashMap;
import java.util.List;

import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;

public class ObjectAddAttribute extends ObjectLoginAuthor {

	public ObjectAddAttribute() {
		super();
	}

	public By addNewDataService = By.xpath("//span[contains(text(),'New Data Service')]");
	public By editButton = By.xpath("//span[contains(text(),'Edit')]");
	public By editDraft = By.xpath("//button[text()='Edit draft']");

	public By allPreviousAttributes = By.xpath("//input[@triggers='manual']");

	public By requiredOnlyRadioButton = By.xpath("//div[contains(text(),'Required')]");
	public By createRadioButton = By.xpath("//div[text()='Create Only']");
	public By uniqueRadioButton = By.xpath("//div[contains(text(),'Unique')]");

	//////// locators for dropdown and the dropdown options ///////////
	public By dropdownArrow = By.xpath("//span[@class='fas fa-angle-down text-accent ng-star-inserted']");
	public By dropdownTypeText = By.xpath("//span[@class='odp-abc']");
	public By dropdownTypeNumber = By.xpath("//span[@class='odp-123']");
	public By dropdownTypeBoolean = By.xpath("//span[@class='odp-boolean']");
	public By dropdownTypeDate = By.xpath("//span[@class='odp-calendar']");
	public By dropdownTypeGroup = By.xpath("//span[@class='odp-group']");
	public By dropdownTypeUser = By.xpath("//body//odp-root//button[5]");
	public By dropdownTypeCollection = By.xpath("//span[@class='odp-array']");
	public By dropdownTypeLocation = By.xpath("//span[@class='odp-location']");
	public By dropdownTypeFile = By.xpath("//span[@class='odp-attach']");
	public By dropdownTypeSchema = By.xpath("//span[@class='odp-library']");
	public By dropdownTypeRelation = By.xpath("//span[@class='odp-references']");

	//// locators inside dropdown option when we choose text /////////
	public By selectDropdownTextText = By.xpath("//label[normalize-space()='Text']");
	public By selectDropdownTextLongText = By.xpath("//label[normalize-space()='Long Text']");
	public By selectDropdownTextRichText = By.xpath("//label[normalize-space()='Rich Text']");
	public By selectDropdownTextEmail = By.xpath("//label[normalize-space()='Email']");
	public By selectDropdownTextSecureText = By.xpath("//label[normalize-space()='Secure Text']");
	public By selectDropdownTextListOfValue = By.xpath("//label[normalize-space()='List of values']");

	///////// additional locators inside dropdown when we choose number ///////
	public By selectDropdownNumberNumber = By.xpath("//label[text()='Number ']");
	public By selectDropdownNumberListOfValue = By.xpath("//label[text()='List of values '] ");
	public By selectDropdownCurrency = By.xpath("//label[text()='Currency '] ");

	/////// locator when we choose number inside dropdown and then again number from
	/////// the list//
	public By customLableTextbox = By.xpath("//input[@id='label']");
	public By errorMessageTextbox = By.xpath("//input[@id='errorMessage']");
	public By deafultValueTextbox = By.xpath("//input[@id='_default']");
	public By precisionSlider = By.xpath("//input[@formcontrolname='precision']");
	public By minNumberTextbox = By.xpath("//input[@id='_minNumber']");
	public By maxNumberTextbox = By.xpath("//input[@id='_maxNumber']");
	public By descriptionTextarea = By.xpath("//textarea[@placeholder='What is this attribute for?']");

	public By popUpNo = By.xpath("//button[text()='No']");
	public By popUpYes = By.xpath("//button[text()='Yes']");

	public By saveButtonAttribute=By.xpath("//button[@id='sbButtonSave']");
	public By saveNDeployAttribute=By.xpath("//span[normalize-space()='Save & Deploy']");
	public By cancelAttribute=By.xpath("//button[@id='sbButtonCancel']");
	
	
	public int numberOfCurrentDataService() {
		List<WebElement> elements = getWebElements(editButton);
		int numberOfDataService = elements.size();
		System.out.println("Number of Data Service Currently avaialble is :" + numberOfDataService);
		return numberOfDataService;
	}

	public int numberOfPreviousAttributes() {
		List<WebElement> elements = getWebElements(allPreviousAttributes);
		int numberOfPreviouAttributes = elements.size();
		System.out.println("Number of previous Attributes are : " + numberOfPreviouAttributes);
		return numberOfPreviouAttributes;
	}

	public void namesOfPreviousAttributes() {
		List<WebElement> elements = getWebElements(allPreviousAttributes);
		int numberOfPreviouAttributes = elements.size();
		for (int i = 0; i < numberOfPreviouAttributes; i++) {
			String name = elements.get(i).getText();
			System.out.println(name);
		}
	}
	public void nameRecentlyAddedAttribute(String nameOfAttribute) {
		int currentNumberOfAttributes=numberOfPreviousAttributes();
		System.out.println(currentNumberOfAttributes);
		List<WebElement> elements = getWebElements(allPreviousAttributes);
		int size=elements.size();
		clickElementJS(elements.get(size-1));
		elements.get(size-1).sendKeys("nameOfAttribute");
	}

	public void editExistingAttribute() {

	}
	public JSONObject getNewAttributeData() {
		JSONObject object=new JSONObject();
		object.put("Custom Label", "Employee Number");
		object.put("Error Message", "Should be a number");
		object.put("Default Value", "1");
		object.put("Minimum Value", "1");
		object.put("Maximum Value", "1000");
		object.put("Description Text", "Describes Employee Number");
		return object;
	}
	/*
	 	Step 0: Login
		Step 1: Click on Edit
		Step 2: Click on editDraft
		Step 3: Click on New Attribute
		Step 4: Click on Attribute Name Field
		Step 5: Send Text and Name the Attribute
		Step 6: Select the options Create, Required and Unique
		Step 7: Select dropdown for type (11 options)
		Step 8: After Selecting dropdown arrow select text type and then again select
		text by usign mouse hover
		Based on the options in 7 the next values will be there
		for number option in step 7 we will continue the flow
		Send Text in Customer label
		Send TExt in Custom Error
		Send Text in Defaut Value
		Let the Drag and drop be default value
		Send TExt in Min and Max value
		Send Text in Description
		Save/Deploy 
	 */
	public void addNewAttribute() {
		clickElement(editButton);
		clickElement(editDraft);
		int numberofPreviousAttributes=numberOfPreviousAttributes();
		clickElement(newAttribute);
		int numberOfCurrentAttributes=numberOfPreviousAttributes();
		applyWait(3000);
		if (numberofPreviousAttributes<numberOfCurrentAttributes) {
			nameRecentlyAddedAttribute("Employee Number");
		}
		clickElement(dropdownArrow);
		clickElement(dropdownTypeText);
		mouseHover(selectDropdownTextText);
		System.out.println(getNewAttributeData().toString());
		JSONObject object=getNewAttributeData();
		enterText(customLableTextBox, object.getString("Custom Label"));
		enterText(errorMessageTextbox, object.getString("Error Message"));
		enterText(deafultValueTextbox, object.getString("Default Value"));
		enterText(minNumberTextbox, object.getString("Minimum Value"));
		enterText(maxNumberTextbox, object.getString("Maximum Value"));
		enterText(descriptionTextarea, "");
		clickElement(saveButtonAttribute);
	}

}
