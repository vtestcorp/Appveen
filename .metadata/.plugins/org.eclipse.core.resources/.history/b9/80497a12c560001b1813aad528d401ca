package com.Config;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;

import io.github.bonigarcia.wdm.WebDriverManager;

public class BaseClass {

	public static WebDriver driver = null;
	public static Properties prop = null;
	public Select select;
	public static WebDriverWait wait;
	public Robot robot;
	public static FileInputStream fis = null;
	public static void main (String[] args) {
		
	}
	public static String getProperty(String key) {
		prop = new Properties();
		try {
			fis = new FileInputStream(System.getProperty("src") + "config.properties");
			prop.load(fis);
		} catch (IOException e) {

			System.out.println("Could not read properties file");
		}
		String value = prop.getProperty(key);
		return value;
	}

	@Parameters("browser")
	@BeforeTest
	public WebDriver setUpDriver(String browserName) {
		WebDriverManager.chromedriver().setup();
		switch (browserName) {
		case "Chrome":
			driver = new ChromeDriver();
			break;
		case "FireFox":
			driver = new FirefoxDriver();
			break;
		case "IE":
			driver = new InternetExplorerDriver();
			break;
		default:
			System.err.print("Incorrect browser name, Please use Chrome, Firefox or IE");
		}
		return driver;
	}

	public static WebDriver getDriver() {
		return driver;
	}

	public void selectFromDropdownByIndex(WebElement element, String value) {
		select = new Select(element);
		select.selectByIndex(Integer.parseInt(value));
	}

	public void selectFromDropdownByText(WebElement element, String value) {
		select = new Select(element);
		select.selectByVisibleText(value);
	}

	public void selectFromDropdownByValue(WebElement element, String value) {
		select = new Select(element);
		select.selectByValue(value);
	}

	public static void applyExplicitWait() {
		wait = new WebDriverWait(getDriver(), 15);
		wait.withTimeout(15, TimeUnit.SECONDS);
	}

	public  void waitUntilElementVisible(WebElement element) {
		wait.until(ExpectedConditions.visibilityOf(element));
	}

	public  void waitUntilElementPresent(By by) {
		wait.until(ExpectedConditions.presenceOfElementLocated(by));
	}

	public void waitUntilElementClickable(WebElement element) {
		wait.until(ExpectedConditions.elementToBeClickable(element));
	}

	public void enterText(WebElement element, String keys) {
		waitUntilElementVisible(element);
		element.clear();
		element.sendKeys(keys);
	}

	public void enterTextJS(WebElement element, String keys) {
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].value='" + keys + "';", element);
	}

	public void enterTextRobot(String keys) {
		try {
			robot = new Robot();
		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		for (char c : keys.toCharArray()) {
			int keyCode = KeyEvent.getExtendedKeyCodeForChar(c);
			if (KeyEvent.CHAR_UNDEFINED == keyCode) {
				throw new RuntimeException("Key code not found for character '" + c + "'");
			}
			robot.keyPress(keyCode);
			robot.delay(100);
			robot.keyRelease(keyCode);
			robot.delay(100);
		}
	}

	public void clickElement(WebElement element) {
		waitUntilElementVisible(element);
		element.click();
	}

	public void clickElementJS(WebElement element) {
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].click();", element);
	}

	public void closePreviousTab() {
		ArrayList<String> tabs = new ArrayList<>(driver.getWindowHandles());
		getDriver().switchTo().window(tabs.get(tabs.size() - 2));
		getDriver().close();
		getDriver().switchTo().window(tabs.get(tabs.size() - 1));
	}

	public String getText(WebElement element) {
		waitUntilElementVisible(element);
		String s = element.getText();
		return s;
	}

	public void scrollToElementJS(WebElement element) {
		waitUntilElementVisible(element);
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView(true);", element);
	}

	public String getCSSValue(WebElement element, String attribute) {
		waitUntilElementVisible(element);
		String value = element.getCssValue(attribute);
		return value;
	}

	public boolean isElementPresent(WebElement element) {
		try {
			waitUntilElementVisible(element);
			return true;
		} catch (Exception e) {
			return false;
		}

	}
}
